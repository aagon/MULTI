#+TITLE : Prise de notes CM 4I106 MULTI
#+PROPERTY: header-args :mkdirp yes
#+STARTUP: inlineimages

Alain Greiner (alain.greiner@lip6.fr)

* Introduction

On va s'intéresser à la manière dont les processeurs communiquent avec le reste de la machine, soit la mémoire et les périphériques.

Un cours de 2 heures.
Un TP/TD de 4 heures, évalués. Finir, rédiger le compte-rendu, compte pour 40%.

Examen final, 60% de la note (deux parties : questions de cours, posées dans les TP, exercice synthèse d'automate)

Les textes des TP sont disponibles dès maintenant (24.25.3 ème étage)


* CM 1 : 29/01/2020


Automate de Moore, automate de Mealy (Mealy cas général, Moore simplifié où les entrées n'ont pas d'influence *directe*).

L'ensemble de l'industrie de la haute technologie (logiciel comme matériel) repose sur deux piliers théoriques :
- Algèbre de Boole
- Théorie des automates synchrones communicants

Tout système matériel numérique synchrone peut être décrit comme une automatque ou un ensemble d'automates communicants.


Numériques : ne manipulent que des bits, des variables booléennes.

Machine 

[à rajouter] définition de combinatoire

système séquentiel : peut avoir une mémoire.


Tous les registres sont contrôlés par le même signal de synchronisation.

Dans un registre, on peut écrire p bits (diffère de n et de m en général)


Lors du front montant de l'horloge, on écrit dans tous les registres (en même temps : *synchrone*)

R est la valeur qui sort du registre, NR est la valeur qui entre.


Comment décrire le comportement d'une boîte de manière non ambigue, systématique


On a besoin de décrire comment les valeurs de sortie dépendent des valeurs en entrée et 



Une fonction booléenne :

Prend un ensemble de valeurs E_0, E_1, ..., E_{n-1}, et rend m valeurs S_j(E_0, ..., E_{n-1}).

S_j est une fonction booléenne.


Une fonction de génération :

m fonctions S_j = G_j(E_0, ...., R_0, ...., R_{p-1})

Pour décrire complètement le comportement de la boîte, il faut aussi définir p fonctions (une par bit à écrire dans le registre), p fonctions :

NR_{k} = T_k (E_0, ...., E_{n-1}, R_0, ...., R_{p-1})

(il faut aussi définir un état initial)

Il existe un E_i spécial, le reset, qui sert juste à forcer une valeur dans les registres internes.

Un état est défini comme une valeur stockée dans le registre.



** Représentation graphique d'un automate d'état synchrone

"Finite state machine" en anglais

Graphe orientés : arc a toujours une source (point à mettre absolument) et une destination (flèche)

1 noeud représente 1 état identifié par un nom.

On donne un nom à une valeur qui a une signification du point de vue du comportement qu'on cherche à décrire.

1 arc représente 1 transition.

Transition : Possibilité de passer de "i" au temps n à "j" au temps n+1.

On peut toujours écrire un automate d'état fini en Moore uniquement. (pourquoi vouloir se débarasser de Mealy ? (reprendre la démonstration))



En matériel, on essaie de ne définir que des automates de Moore, pour éviter les chaînes longues (et pour forcer les changements d'états uniquement sur les fronts d'horloge).

Puisque dans le cas des automates de Moore, la valeur en sortie ne dépend que de la valeur du registre, on peut étiqueter par la valeur S_j, dépendante de l'état.

Une transition "i" et "j" ne dépend que des valeurs des entrées (E_0, ..., E_{n-1}). On peut avoir envie d'étiqueter la transition avec la condition sur l'entrée qui la fait advenir (cette condition est une expression booléenne qui ne fait intervenir que des E, et si possible un petit nombre de ces E).


2 conditions :

- Si je prends deux conditions de sortie au hasard, leur intersection doit être nulle (donne *l'orthogonalité*)
- Si je prends toutes les conditions et que je fais leur union, je dois avoir l'univers. (donne la *complétude*)

Si ces deux conditions sont vérifiées, on a un comportement déterministe garanti.



*** Exemple : un allocateur de ressources exclusif équitable sans court-circuit

Equitable : famine impossible.

Que signifie chaque état :

IDLE0 : le bus n'est pas alloué, et core0 est prioritaire
IDLE1 : le bus n'est pas alloué, et core1 est prioritaire
ALLOC0 : le bus est alloué à core0
ALLOC1 : le bus est alloué à core1

[reprendre la feuille volante]


**** Codage des états

|        | R0 | R1 |   | Q0 | Q1 | Q2 | Q3 |
|--------+----+----+---+----+----+----+----|
| ALLOC0 |  0 |  0 |   |  1 |  0 |  0 |  0 |
| ALLOC1 |  0 |  1 |   |  0 |  1 |  0 |  0 |
| IDLE0  |  1 |  0 |   |  0 |  0 |  1 |  0 |
| IDLE1  |  1 |  1 |   |  0 |  0 |  0 |  1 |

On a le choix entre l'encodage binaire, à gauche, et l'encodage one hot, à droite.

**** Consturction de la table de vérité

| R1 | R0 | REQ1 | REQ0 |   | NR1 | NR0 | GNT1 | GNT0 |
|----+----+------+------+---+-----+-----+------+------|
|  0 |  0 |    0 |    0 |   |   1 |   1 |    0 |    1 |
|  0 |  0 |    0 |    1 |   |   0 |   0 |    0 |    1 |
|  0 |  0 |    1 |    0 |   |   1 |   1 |    0 |    1 |
|  0 |  0 |    1 |    1 |   |   0 |   0 |    0 |    1 |
|----+----+------+------+---+-----+-----+------+------|
|  0 |  1 |    0 |    0 |   |   1 |   0 |    1 |    0 |
|  0 |  1 |    0 |    1 |   |   1 |   0 |    1 |    0 |
|  0 |  1 |    1 |    0 |   |   0 |   1 |    1 |    0 |
|  0 |  1 |    1 |    1 |   |   0 |   1 |    1 |    0 |
|----+----+------+------+---+-----+-----+------+------|
|  1 |  0 |    0 |    0 |   |   1 |   0 |    0 |    0 |
|  1 |  0 |    0 |    1 |   |   0 |   0 |    0 |    0 |
|  1 |  0 |    1 |    0 |   |   0 |   1 |    0 |    0 |
|  1 |  0 |    1 |    1 |   |   0 |   0 |    0 |    0 |
|----+----+------+------+---+-----+-----+------+------|
|  1 |  1 |    0 |    0 |   |   1 |   1 |    0 |    0 |
|  1 |  1 |    0 |    1 |   |   0 |   0 |    0 |    0 |
|  1 |  1 |    1 |    0 |   |   0 |   1 |    0 |    0 |
|  1 |  1 |    1 |    1 |   |   0 |   1 |    0 |    0 |
|----+----+------+------+---+-----+-----+------+------|

**** Simplification

NR1 = C(req0).C(R1).C(R0) + C(Req0).C(Req1) + C(R1).R0.C(Req1) 

NR0 = C(Req0).Req1 + R0.Req1 + R1.R0.C(Req0) + C(R1).C(R0).C(Req0)

GNT1 = R0.C(R1) = C(C(R0) + R1)

GNT0 = C(R0).C(R1) = C(R0 + R1)


On va avoir besoin d'une table de Karnaugh

NR1

Lignes R1 puis R0
Colonnes Req1 puis Req0

|    | 00 | 01 | 11 | 10 |
| 00 |  1 |    |    |    |
| 01 |    |    |    |    |
| 11 |    |    |    |    |
| 10 |    |    |    |    |


La colonne de gauche peut s'écrire :

C(Req1) inter C(Req0)

Le bout de la première ligne s'écrit :

C(Req0) inter C(R1) inter C(R0)

Le bout de la deuxième ligne s'écrit :

C(R1) inter R0 inter C(Req1)


[Refaire pareil pour NR0]

**** Traduire les expressions booléennes en schéma

[fait au papier]









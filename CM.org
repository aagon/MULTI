#+TITLE : Prise de notes CM 4I106 MULTI
#+PROPERTY: header-args :mkdirp yes
#+STARTUP: inlineimages

Alain Greiner (alain.greiner@lip6.fr)

* Introduction

On va s'intéresser à la manière dont les processeurs communiquent avec le reste de la machine, soit la mémoire et les périphériques.

Un cours de 2 heures.
Un TP/TD de 4 heures, évalués. Finir, rédiger le compte-rendu, compte pour 40%.

Examen final, 60% de la note (deux parties : questions de cours, posées dans les TP, exercice synthèse d'automate)

Les textes des TP sont disponibles dès maintenant (24.25.3 ème étage)


* CM 1 : 29/01/2020

L'ensemble de l'industrie de la haute technologie (logiciel comme matériel) repose sur deux piliers théoriques :
- Algèbre de Boole
- Théorie des automates synchrones communicants

#+BEGIN_DEFINITION
Automate fini (Finite state machine) (définition générale)

Machine abstraite qui peut être, à chaque instant, être dans exactement un état choisi parmi un ensemble fini et connu d'états. La machine peut passer d'un état à un autre en réponse à certaines entrées.

On définit de manière complète un automate fini par la liste de ses états, son état initial, et les entrées qui font passer l'automate d'un état à un autre.
#+END_DEFINITION

Tout système matériel numérique synchrone peut être décrit comme une automate ou un ensemble d'automates communicants.

L'ensemble des états d'un automate qui chercherait à décrire complètement le comportement d'un petit ordinateur est beaucoup trop grand pour pouvoir être donné.

On peut combiner les automates, et on va s'efforcer de modéliser les comportements de petites parties du système matériel qu'on cherche à comprendre.

Comment définit-on l'état d'un automate ?
Par un ensemble de registres internes à l'automate.

Chaque automate a un certain nombre n d'entrées, qu'on va nommer E_0, E_1, ..., E_{n-1}.

Puisqu'on cherche à représenter du matériel, ces entrées peuvent être pensées comme des nappes de fils. Ces nappes de fils en entrée peuvent être en sortie d'autres automates, et c'est en cela qu'on peut considérer un ensemble d'automates communicants.

Ensuite, chaque automate a un certain nombre d'états, qui sont représentés par des registres. Imaginons ici un registre de p bits, qui permet donc de stocker 2^p états.

On peut éventuellement nommer les bits des registres R_0, R_1, ..., R_{p-1}.

On dit que la machine est synchrone parce que tous les registres de tous les automates sont mis à jour en même temps, sur le front montant de l'horloge (le front descendant ne nous intéresse pas). Tous les registres sont contrôlés par le même signal de synchronisation. En entrée de tous les automates, on a donc un fil spécial connecté directement au registre, qui dirige l'instant de sa mise à jour.

On dit que le matériel est numérique parce que les automates ne manipulent que des bits, aussi bien dans leurs entrées, registre et sorties.

En plus des valeurs de bits du registre R_0, R_1, ..., R_{p-1}, on doit aussi nommer les valeurs des bits du registre après synchronisation NR_0, NR_1, ..., NR_{p-1}.

En sortie de cet automate se trouve aussi une nappe de m fils S_0, S_1, ..., S_{m-1}, qui sont potentiellement en entrée d'un autre automate.

On remarque donc bien que tous les E, R, NR et S sont des variables booléennes.

La question est la suivante : comment décrire le comportement d'un de ces automates de manière non ambigüe et systématique.

On a besoin de décrire exactement comment les nouvelles valeurs des registres dépendent des anciennes valeurs et des entrées. Techniquement, si on avait un seul automate, on pourrait s'arrêter là :

p fonctions booléennes, les *fonctions de transition* :

NR_{k} = T_k (E_0, ...., E_{n-1}, R_0, ...., R_{p-1}) avec k allant de 0 à p-1.

Qui dépendent effectivement des entrées et de l'état, soit des valeurs des bits du registre. 

Puisqu'on considère des automates connectés entre eux, on a aussi besoin des m fonctions booléennes qui donnent la valeur des fils en sortie. Ces fonctions sont appelées *fonctions de génération* :

S_{j} = G_{j} (E_0, ...., E_{n-1}, R_0, ...., R_{p-1})


Cet automate qu'on vient de définir a donc les propriétés suivantes :

Son état suivant dépend des valeurs en entrée et de son état courant.
Les valeurs en sorties dépendent de son état courant et de ses entrées.

C'est un *automate de Mealy*.

#+BEGIN_DEFINITION
Automate de Mealy

Un automate de Mealy est un automate fini dont les valeurs en sorties sont déterminées par l'état courant et les valeurs en entrée.
#+END_DEFINITION

De cet automate, on peut imaginer plusieurs cas particuliers. On peut par exemple imaginer un automate dont les valeurs en sorties :
- Dépendent uniquement de l'état courant
- Dépendent uniquement des valeurs en entrée. 

Le premier cas particulier est celui qui va nous intéresser. Dans cette machine, les entrées n'ont d'influence directe que sur l'état, qui lui influence la sortie à son tour. Une machine qui respecte cette propriété est un *automate de Moore*.

Le deuxième cas particulier ne nous intéresse pas. Si l'état courant n'a pas d'influence, la machine n'a pas de mémoire, la machine se résume en fait à un paquet de fonctions combinatoires.

On va essayer, autant qu'il est possible, de se débarasser des automates de Mealy.

Pourquoi ?

Puisque les sorties de l'automate de Mealy dépendent de l'état courant et des entrées, on peut avoir des fonctions de génération qui ne font intervenir que les entrées. Or les entrées sont continues (ce sont des fils qui balancent continûment un signal), ce qui fait que les changements de sortie peuvent intervenir à n'importe quel moment, pas seulement sur les fronts d'horloge.

Inversement, les sorties d'un automate de Moore changent toujours en même temps que le front d'horloge.

Ce problème va encore plus loin. Puisque un changement d'entrée (dans Mealy) peut causer un changement de sortie n'importe quand, si plusieurs machines de Mealy sont interconnectées, on peut créer du retour asynchrone.

Il existe un fil en entrée spécial, le reset, qui sert juste à forcer une valeur dans les registres internes.


** Représentation graphique d'un automate d'état synchrone

La manière naturelle de représenter un automate fini, c'est le graphe orienté.

Graphe orientés : arc a toujours une source (point à mettre absolument) et une destination (flèche).

Un noeud représente un état identifié par un nom.

On donne un nom à une valeur qui a une signification du point de vue du comportement qu'on cherche à décrire.

Un arc représente une transition.

Transition : Possibilité de passer de "i" au temps n à "j" au temps n+1.

On peut toujours écrire un automate d'état fini en Moore uniquement. Par contre, tout automate de Mealy n'a pas d'équivalent Moore identique. On peut créer une machine de Moore presque identique, avec les sorties différées dans le temps. (des sorties asynchrones dans Mealy deviennent synchrone dans Moore).

En matériel, on essaie de ne définir que des automates de Moore, pour éviter les chaînes longues (et pour forcer les changements d'états uniquement sur les fronts d'horloge).

Puisque dans le cas des automates de Moore, la valeur en sortie ne dépend que de la valeur du registre, on peut étiqueter par les valeurs en sortie, dépendante de l'état.

Une transition "i" vers "j" ne dépend que des valeurs des entrées (E_0, ..., E_{n-1}) puisque l'état est donnné. On peut avoir envie d'étiqueter la transition avec la condition sur l'entrée qui la fait advenir (cette condition est une expression booléenne qui ne fait intervenir que des E, et si possible un petit nombre de ces E).

Par contre, si on veut un comportement déterministe (et on veut absolument un comportement déterministe de la machine), on doit vérifier deux conditions :

- Si je prends deux conditions de sortie au hasard, leur intersection doit être nulle (donne *l'orthogonalité*)
- Si je prends toutes les conditions et que je fais leur union, je dois avoir l'univers. (donne la *complétude*)


*** Exemple : un allocateur de ressources exclusif équitable sans court-circuit

Exclusif, sans court-circuit : deux matériels ne peuvent pas écrire sur le bus en même temps.
Equitable : famine impossible.

On a deux coeurs.

Pour rendre la famine impossible, on se propose de donner l'algorithme d'ordonnancement suivant : quand un seul des deux coeurs demande le bus, on le donne pour une durée a priori non bornée. Quand les deux demandent le bus, on l'alloue à celui qui ne l'a pas eu le dernier. Un demandeur maintient sa demande tant qu'il utilise ou veut le bus, et relâche quand il a finit de l'utiliser.

Il doit toujours il y avoir un cycle de libre après l'utilisation du bus par un maître, et avant l'utilisation par un autre maître, pour éviter les courts-circuits même transitoires.

L'allocateur a donc au moins deux fils en entrée, d'un bit chacun, REQ0 et REQ1, qui disent respectivement si REQ0 ou REQ1 demandent ou utilisent le bus.

On imagine aussi que l'allocateur doit dire aux différents coeurs s'il leur accorde le bus. On a donc deux fils en sortie, GNT0 et GNT1 (pour grant).

Il faut garder en mémoire le coeur prioritaire, qui n'a de sens que si le bus est inutilisé.

On a donc quatre états, IDLE0, IDLE1, ALLOC0 et ALLOC1 qui signifient les choses suivantes :

IDLE0 : le bus n'est pas alloué, et core0 est prioritaire
IDLE1 : le bus n'est pas alloué, et core1 est prioritaire
ALLOC0 : le bus est alloué à core0
ALLOC1 : le bus est alloué à core1

Puisqu'on a quatre états, on a besoin de deux bits pour les coder.

#+NAME: allocsketch
#+BEGIN_SRC dot
  digraph alloc_hw {

	  graph [splines=ortho, nodesep=0.8]
	  node[shape=box];
	  REQ0 [style=invis];
	  REQ1 [style=invis];
	  GNT0 [style=invis];
	  GNT1 [style=invis];

	  alloc [label="Allocateur de bus"];

	  REQ0 -> alloc [label="REQ0\n1"];
	  REQ1 -> alloc [label="REQ1\n1"];
	  alloc -> GNT0 [label="GNT0\n1"];
	  alloc -> GNT1 [label="GNT1\n1"];

	  {rank=min; REQ0 REQ1};
	  {rank=max; GNT0 GNT1};

  }
#+END_SRC

#+CALL: allocsketch[:engine graph-easy :results output verbatim drawer :cmdline --as_boxart]()

#+RESULTS:
:RESULTS:



              │
              │ REQ0
              │ 1
              ▼
     REQ1   ┌───────────────────┐  GNT1
     1      │ Allocateur de bus │  1
    ──────▶ │                   │ ──────▶
            └───────────────────┘
              │
              │ GNT0
              │ 1
              ▼
:END:


#+CALL: allocsketch[:engine graphviz :file ./CM1/allocsketch.png :cmdline -Tpng]()

#+RESULTS:
[[file:./CM1/allocsketch.png]]


Regardons maintenant comment les états s'agencent entre eux.

Puisqu'on a cette prévention des court-circuits transitoires qui empêche le passage de ALLOC0 à ALLOC1, et vice versa, et puisque l'automate veut enregistrer la priorité :
- Depuis ALLOC0, on ne peut aller que vers ALLOC0 (REQ0) ou IDLE1 (C(REQ0))
- Depuis ALLOC1, on ne peut aller que vers ALLOC1 (REQ1) ou IDLE0 (C(REQ1))

Depuis IDLE0 :
- Soit personne ne demande (C(REQ0).C(REQ1)) auquel cas on reste dans IDLE0
- Soit core0 demande (REQ0), auquel cas on lui donne inconditionnellement, il est prioritaire.
- Soit core1 demande et core0 ne demande pas (C(REQ0).REQ1), alors on donne le bus à core1.

Depuis IDLE1 :
- Soit personne ne demande (C(REQ0).C(REQ1)) auquel cas on reste dans IDLE1
- Soit core1 demande (REQ1), auquel cas on lui donne inconditionnellement, il est prioritaire.
- Soit core0 demande et core1 ne demande pas (REQ0.C(REQ1)), alors on donne le bus à core0.

On a bien la complétude et l'orthogonalité pour tous les noeuds.

#+NAME: allocstates
#+BEGIN_SRC dot
  digraph alloc_states {
	  node[shape=ellipse];
	  edge[dir=both,arrowhead=normal, arrowtail=dot];

	  IDLE0 [label="IDLE0\n00"];
	  IDLE1 [label="IDLE1\n00"];
	  ALLOC0 [label="ALLOC0\n10"];
	  ALLOC1 [label="ALLOC1\n01"];

	  ALLOC0 -> ALLOC0 [label="REQ0"];
	  ALLOC0 -> IDLE1 [label="C(REQ0)"];

	  ALLOC1 -> ALLOC1 [label="REQ1"];
	  ALLOC1 -> IDLE0 [label="C(REQ1)"];

	  IDLE0 -> IDLE0 [label="C(REQ0).C(REQ1)"];
	  IDLE0 -> ALLOC0 [label="REQ0"];
	  IDLE0 -> ALLOC1 [label="C(REQ0).REQ1"];

	  IDLE1 -> IDLE1 [label="C(REQ0).C(REQ1)"];
	  IDLE1 -> ALLOC1 [label="REQ1"];
	  IDLE1 -> ALLOC0 [label="REQ0.C(REQ1)"];

	  {rank=min; IDLE0 IDLE1};
	  {rank=same; ALLOC0 ALLOC1};
  }
#+END_SRC

#+CALL: allocstates[:engine graph-easy :results output verbatim drawer :cmdline --as_boxart]()

#+RESULTS:
:RESULTS:
                          C(REQ0).C(REQ1)
                        ┌─────────────────┐
                        ▼                 │
                      ┌─────────────────────┐
      C(REQ1)         │        IDLE0        │
  ┌─────────────────▶ │         00          │ ─┐
  │                   └─────────────────────┘  │
  │                     │                      │
  │                     │ REQ0                 │
  │                     ▼                      │
  │                   ┌─────────────────────┐  │
  │                   │       ALLOC0        │  │
  │    ┌────────────▶ │         10          │  │
  │    │              └─────────────────────┘  │
  │    │                │                      │
  │    │ REQ0.C(REQ1)   │ C(REQ0)              │
  │    │                ▼                      │
  │    │              ┌─────────────────────┐  │
  │    │              │        IDLE1        │  │
  │    └───────────── │         00          │  │
  │                   └─────────────────────┘  │
  │                     │                      │
  │                     │ REQ1                 │ C(REQ0).REQ1
  │                     ▼                      │
  │                   ┌─────────────────────┐  │
  │                   │       ALLOC1        │  │
  └────────────────── │         01          │ ◀┘
                      └─────────────────────┘
                        ▲ REQ1            │
                        └─────────────────┘
:END:

#+CALL: allocstates[:engine graphviz :file ./CM1/allocstates.png :cmdline -Tpng]()

#+RESULTS:
[[file:./CM1/allocstates.png]]


**** Codage des états

|        | R0 | R1 |   | Q0 | Q1 | Q2 | Q3 |
|--------+----+----+---+----+----+----+----|
| ALLOC0 |  0 |  0 |   |  1 |  0 |  0 |  0 |
| ALLOC1 |  0 |  1 |   |  0 |  1 |  0 |  0 |
| IDLE0  |  1 |  0 |   |  0 |  0 |  1 |  0 |
| IDLE1  |  1 |  1 |   |  0 |  0 |  0 |  1 |

On a le choix entre l'encodage binaire, à gauche, et l'encodage "one hot", à droite. Celui de gauche a l'avantage de nécessiter moins de bits, mais celui de droite est préféré des outils de CAO, qui produisent des circuits un peu meilleurs avec.

**** Construction de la table de vérité

On cherche maintenant à exprimer NR0, NR1, GNT0 et GNT1 en fonction de R0, R1, REQ0 et REQ1

On remplit cette table état par état.

| R0 | R1 | REQ0 | REQ1 |   | NR0 | NR1 | GNT0 | GNT1 |
|----+----+------+------+---+-----+-----+------+------|
|  0 |  0 |    0 |    0 |   |   1 |   1 |    1 |    0 |
|  0 |  0 |    0 |    1 |   |   1 |   1 |    1 |    0 |
|  0 |  0 |    1 |    0 |   |   0 |   0 |    1 |    0 |
|  0 |  0 |    1 |    1 |   |   0 |   0 |    1 |    0 |
|----+----+------+------+---+-----+-----+------+------|
|  0 |  1 |    0 |    0 |   |   1 |   0 |    0 |    1 |
|  0 |  1 |    0 |    1 |   |   0 |   1 |    0 |    1 |
|  0 |  1 |    1 |    0 |   |   1 |   0 |    0 |    1 |
|  0 |  1 |    1 |    1 |   |   0 |   1 |    0 |    1 |
|----+----+------+------+---+-----+-----+------+------|
|  1 |  0 |    0 |    0 |   |   1 |   0 |    0 |    0 |
|  1 |  0 |    0 |    1 |   |   0 |   1 |    0 |    0 |
|  1 |  0 |    1 |    0 |   |   0 |   0 |    0 |    0 |
|  1 |  0 |    1 |    1 |   |   0 |   0 |    0 |    0 |
|----+----+------+------+---+-----+-----+------+------|
|  1 |  1 |    0 |    0 |   |   1 |   1 |    0 |    0 |
|  1 |  1 |    0 |    1 |   |   0 |   1 |    0 |    0 |
|  1 |  1 |    1 |    0 |   |   0 |   0 |    0 |    0 |
|  1 |  1 |    1 |    1 |   |   0 |   1 |    0 |    0 |
|----+----+------+------+---+-----+-----+------+------|

**** Simplification

On cherche maintenant à exprimer la table de vérité sous forme analytique.

Les valeurs en sortie sont les plus faciles à exprimer :

GNT1 = R0.C(R1) = C(C(R0) + R1)
GNT0 = C(R0).C(R1) = C(R0 + R1)

(on note qu'on préfère les sommes de Boole aux produits, parce que les portes logiques OR sont moins chères en matériel que les portes AND)

Les états :

La version naïve consiste à lire toutes les lignes de la table de vérité :

NR1 = C(R0).C(R1).C(REQ0) +
      C(R0).R1.REQ1 +
      R0.C(R1).C(REQ0).REQ1 +
      R0.R1.(REQ0.REQ1 + C(REQ0).C(REQ1) + C(REQ0).REQ1) 

NR0 = C(R0).C(R1).C(REQ0) +
      C(R0).R1.C(REQ1) +
      R0.C(R1).C(REQ0).C(REQ1) +
      R0.R1.C(REQ0).C(REQ1)
      
(ici groupées par état actuel)

On essaie, autant qu'il est possible, de simplifier cette expression.

Une technique utilisée pour simplifier les expressions booléennes complexes est la table de Karnaugh.

Le principe est relativement simple :

En l'occurence, la valeur de l'expression booléenne dépend de la valeur de 4 bits, ce qui fait donc 16 possibilités.

Pour NR0 :

| R\REQ | 00 | 01 | 11 | 10 |
|    00 |  1 |  1 |  0 |  0 |
|    01 |  1 |  0 |  0 |  1 |
|    11 |  1 |  0 |  0 |  0 |
|    10 |  1 |  0 |  0 |  0 |

Notons que cette table est construite de manière à avoir une distance de Levenshtein de 1 entre chaque ligne et entre chaque colonne.

Le but est maintenant de regrouper les 1 par groupe adjacents (carrés ou lignes) de taille de puissances de 2, sachant que les colonnes wrap (la distance de Levenshtein entre la colonne à l'extrême-gauche et la colonne à l'extrême-droite est de 1).

Par exemple, ici, la colonne de gauche (4), les deux premières colonnes de la première ligne (2), et la première et la dernière colonne de la deuxième ligne (2).

On peut exprimer notre expression booléenne comme une somme de ces formes :

NR0 = C(REQ0).C(REQ1) + C(R0).C(R1).C(REQ0) + C(R0).R1.C(REQ1)

Pour NR1 :

| R\REQ | 00 | 01 | 11 | 10 |
|    00 |  1 |  1 |  0 |  0 |
|    01 |  0 |  1 |  1 |  0 |
|    11 |  1 |  1 |  1 |  0 |
|    10 |  0 |  1 |  0 |  0 |

Par exemple, ici, la deuxième colonne (4), le gros carré du milieu (4), les deux premières colonnes de la première ligne (2) et de la troisième ligne (2).

NR1 = C(REQ0).REQ1 + R1.REQ1 + C(R0).C(R1).C(REQ0) + R0.R1.C(REQ0)

O peut éventuellement ensuite essayer de factoriser. On prendra garde à ne pas trop factoriser non plus, une factorisation signifie des portes logiques en série (et ça on aime pas).

Dans les faits, on laissera le soin à une machine de faire tout ça pour nous.


* CM 2 : 05/02/2020

Ce cours s'intéresse au PIBUS.

Une question d'un élève en particulier : pourquoi, alors qu'on a vu que seul le front montant de l'horloge avait une influence sur la mise à jour des registres, le front descendant était utilisé dans SOCLIB ?

Cette question est en fait plus générale. On fait intervenir le front descendant dans tous les modèles de composants matériels systemC.

Ce qui justifie un aparté un peu plus long sur les systèmes de simulation du matériel.

On distinguera deux types de systèmes :
- Les systèmes de type VHDL ou Verilog dont le but est de donner une spécification détaillée de l'architecture d'un système, de manière à ce qu'elle puisse être vérifiée et donnée à une machine de synthèse qui donnera la logique en portes (qui elle-même sera donnée à un outil de plus bas niveau encore dont le but sera de réaliser le dessin du matériel en transistor, avec des logiciels de VLSI)
- Les systèmes de type SystemC, de plus haut niveau, dont le but n'est pas une spécification suffisemment détaillée pour une synthèse, mais bien plutôt pour une simulation rapide. Le but est de pouvoir exécuter sur notre simulation un vrai programme, de manière à avoir une idée exacte du déroulement et du temps pris par un calcul. Pour cette raison là, on aimerait bien que la simulation ne soit pas pire que 1000 fois moins bonne qu'en matériel.

** La modélisation en systemC : le modèle des automates d'états finis communicants synchrones

Tout système peut être décrit comme un ensemble de boîtes, avec dedans un registre de taille arbitraire.

SystemC n'est pas à proprement parler un langage de programmation, c'est un ensemble de classes C++.

L'idée est d'associer une classe à chaque composant matériel interconnectable.

Dans une classe représentant un matériel, les variables membres sont de 2 types :
- les variables définissant l'état interne (les registres, préfixés par r_)
- les constantes structurelles (dans le constructeur de l'objet, constantes) (préfixées par m_)

Pour définir le comportement d'un certain composant matériel, on écrit deux méthodes :
- la fonction de transition (calcule la valeur future des registres internes) (en fonction des valeurs présentes des registres et des signaux en entrée).
- la fonction de génération genMoore (calcule la valeur des signaux en sortie).

systemC permet de retarder la mise à jour d'une valeur, chose dont on peut avoir besoin pour représenter les valeurs des fils en sortie (appelés signaux). C'est le type sc_signal qui donne la sémantique de la mise à jour retardée de la valeur, retardée au amoins jusqu'à la sortie de la fonction.

Quel sera le moteur de simulation ? (une grosse boucle)

#+BEGIN_SRC c
  while (cycle < MAX) {
	  Transition(0);
	  Transition(1);
	  Transition(2);
	  Transition(3);
	  GenMoore(0);
	  GenMoore(1);
	  GenMoore(2);
	  GenMoore(3);
  }
#+END_SRC

L'ordre n'a pas d'importance, grâce au type sc_signal.

On doit juste prendre garde à bien mettre la mise à jour des registres avant de calculer et balancer les signaux de sortie.

Pour ça, on évalue les transitions sur les fronts montants, et les générations sur les fronts descendants : c'est pour cette raison que systemC fait intervenir les fronts descendants.

*** Ajouter un automate de Mealy ?

On va toujours avoir affaire à un petit nombre d'automates de Mealy.

On enrichit la classe, et on différencie genMoore et genMealy.

liste de sensibilités :
- transition : front montant
- genMoore : front descendant
- genMealy : front descendant et E' (les entrées qui participent à la génération de Mealy)

On doit rajouter les fonctions de Mealy à la fin de la grosse boucle. Par contre, leur ordre importe maintenant.

#+BEGIN_SRC c
  while (cycle < MAX) {
	  Transition(0);
	  Transition(1);
	  Transition(2);
	  Transition(3);
	  GenMoore(0);
	  GenMoore(1);
	  GenMoore(2);
	  GenMealy(3);
  }
#+END_SRC


** Automates, suite

On s'intéresse à un nouvel automate, le BCU, qui se trouve être un automate de Mealy. Pourquoi ? Parce qu'il doit répondre au maître *dans le même cycle* que la demande de ce dernier, il répond donc de manière asynchrone aux mises à jour des registres, donc du front d'horloge montant.

BCU prend en entrée:
- le signal A (l'adresse) sur 30 bits
- le signal LOCK sur 1 bit
- le signal ACK sur 2 bits

en sortie :
- le signal GNT (grant) sur 1 bit
- le signal SEL0 sur 1 bit
- le signal SEL1 sur 1 bit

Quels sont les états de cet automate :

- Un état IDLE : on n'a pas de REQ au cycle précédent (soit bus non alloué)
- Un état AD : le bus a été alloué, et c'est la première commande

Le maître ne se répètera pas, la cible doit prendre et enregistrer la commande.

- Un état DT/AD : la commande précédente n'était pas la dernière et on attend la réponse à cette commande précédente.

- Un état DT : la commande précédente était la dernière et le maître et le BCU attendent la réponse

Il faut bien donner la signification de chaque état, il ne faut pas être paresseux, il faut écrire.

La fonction de génération :

#+NAME: bcu
#+BEGIN_SRC dot
  digraph bcu {
	  node[shape=ellipse];
	  edge[dir=both, arrowhead=normal, arrowtail=dot];

	  IDLE [label="IDLE"];
	  AD [label="AD"];
	  DTAD [label="DT/AD"];
	  DT [label="DT"];

	  IDLE -> IDLE [label="C(REQ)"];
	  IDLE -> AD [label="REQ"];

	  AD -> DTAD [label="LOCK"];
	  AD -> DT [label="C(LOCK)"];

	  DTAD -> DTAD [label="WAIT+LOCK"];
	  DTAD -> DT [label="C(LOCK).C(WAIT)"];

	  DT -> DT [label="WAIT"];
	  DT -> AD [label="C(WAIT).REQ"];
	  DT -> IDLE [label="C(WAIT).C(REQ)"];
  }
#+END_SRC


#+CALL: bcu[:engine graph-easy :results output verbatim drawer :cmdline --as_boxart]()

Attention, le graphe produit par graph-easy est faux.

#+RESULTS:
:RESULTS:
    C(REQ)      ┌──────────────────┐
  ┌──────────── │                  │
  │             │       IDLE       │  C(WAIT).C(REQ)
  └───────────▶ │                  │ ◀───────────────────┐
                └──────────────────┘                     │
                  │                                      │
                  │ REQ                                  │
                  ▼                                      │
                ┌──────────────────┐                     │
  ┌───────────▶ │        AD        │ ─┐                  │
  │             └──────────────────┘  │                  │
  │               │                   │                  │
  │ C(WAIT).REQ   │ LOCK              │                  │
  │               ▼                   │                  │
  │             ┌──────────────────┐  │                  │
  │             │      DT/AD       │  │                  │
  │             └──────────────────┘  │                  │
  │               │                   │                  │
  │               │ C(LOCK).C(WAIT)   │ C(LOCK)          │
  │               ▼                   ▼                  │
  │             ┌──────────────────────────────────────────┐   WAIT
  │             │                                          │ ───────┐
  │             │                    DT                    │        │
  └──────────── │                                          │ ◀──────┘
                └──────────────────────────────────────────┘
:END:



#+CALL: bcu[:engine graphviz :file ./CM2/bcu.png :cmdline -Tpng]()

#+RESULTS:
[[file:./CM2/bcu.png]]


*** Comment spécifier la fonction de génération

Puisqu'on a affaire à un automate de Mealy, on ne peut plus se contenter de mettre les sorties avec les étiquettes des états (à moins de les conditionner explicitement, ce qui peut alourdir le graphe).

La solution naturelle, c'est la table de vérité.

|       | GNT | SEL0         | SEL1          |
|-------+-----+--------------+---------------|
| IDLE  | REQ | 0            | 0             |
| AD    |   0 | DEC(A) = RAM | DEC(A) ne RAM |
| DT/AD |   0 | DEC(A) = RAM | DEC(A) ne RAM |
| AD    | REQ | 0            | 0             |




